
import { GoogleGenAI } from "@google/genai";

const cleanPrompt = (prompt: string): { cleaned: string; aspectRatio: '1:1' | '3:4' | '4:3' | '9:16' | '16:9' } => {
  let aspectRatio: '1:1' | '3:4' | '4:3' | '9:16' | '16:9' = '3:4'; // Default aspect ratio
  
  const arMatch = prompt.match(/--ar\s+(\d+:\d+)/);
  if (arMatch && arMatch[1]) {
      const matchedRatio = arMatch[1];
      if (['1:1', '3:4', '4:3', '9:16', '16:9'].includes(matchedRatio)) {
        aspectRatio = matchedRatio as '1:1' | '3:4' | '4:3' | '9:16' | '16:9';
      }
  }

  const cleaned = prompt
    .replace(/::\d+(\.\d+)?/g, '') // Remove weights like ::1.5
    .replace(/--\w+\s+\S+/g, '')   // Remove parameters like --ar 3:4
    .replace(/,/g, ', ')         // Ensure spaces after commas
    .replace(/\s+/g, ' ')         // Collapse multiple spaces
    .trim();

  return { cleaned: `A high-quality, festive image of: ${cleaned}`, aspectRatio };
};


export const generateMugImage = async (prompt: string): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
  }

  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
  const { cleaned, aspectRatio } = cleanPrompt(prompt);

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: cleaned,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: aspectRatio,
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to generate image from Gemini API.");
  }
};
